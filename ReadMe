Rewards Program API
Description
This project provides a RESTful API for a retailer's rewards program. Customers earn points based on their transaction amounts, with the following rules:

Points Calculation:

2 points for every dollar spent above $100 in a transaction.
1 point for every dollar spent between $50 and $100 in a transaction.
Example: A $120 purchase = 2 × $20 + 1 × $50 = 90 points.
Rewards Period:

Rewards are calculated for the past 3 months by default.
Customizable rewards period is supported through an additional API.
Endpoints
1. Get Rewards for the Last 3 Months
URL: /rewards/{customerId}
Method: GET
Path Variable:
customerId (Long): The unique ID of the customer.
Response:
customer: The customer's name.
monthlyRewards: A map of months to reward points earned.
totalRewards: Total reward points earned in the last 3 months.
Example Response:
json
Copy code
{
  "customer": "Harshit Gupta",
  "monthlyRewards": {
    "AUGUST": 90,
    "SEPTEMBER": 75,
    "OCTOBER": 105
  },
  "totalRewards": 270
}
2. Get Rewards for a Custom Period
URL: /rewards/{customerId}/customize
Method: GET
Path Variable:
customerId (Long): The unique ID of the customer.
Query Parameter:
months (int, optional): The number of months to calculate rewards for (default is 3).
Response:
customer: The customer's name.
monthlyRewards: A map of months to reward points earned.
totalRewards: Total reward points earned in the specified period.
Example Request:
bash
Copy code
GET /rewards/1/customize?months=6
Example Response:
json
Copy code
{
  "customer": "Harshit Gupta",
  "monthlyRewards": {
    "MAY": 80,
    "JUNE": 120,
    "JULY": 90,
    "AUGUST": 95,
    "SEPTEMBER": 75,
    "OCTOBER": 105
  },
  "totalRewards": 565
}
Key Features-

Calculates reward points for purchases in a three-month period or a customizable period.
Supports real-time data fetching from a PostgreSQL database.
Includes robust exception handling for invalid customer requests.

How to Run-

Set up a PostgreSQL database and update the application.yml file with the database connection details.
Use the provided data.sql to populate initial customer and transaction data.
Run the Spring Boot application.
Use API testing tools like Postman or cURL to interact with the endpoints.

Technology Stack-

Backend: Java, Spring Boot
Database: PostgreSQL
Testing: JUnit, MockMvc

This API provides an efficient way to manage and calculate reward points for customers based on their transaction history, making it flexible for future extensions and integrations.
